//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\antos07\Documents\University\OOP Labs\Lab1\Lab1\Models\Parsers\antlr4\Expressions.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOT=1, OPENING_BRACKET=2, CLOSING_BRACKET=3, EQUAL=4, LESS=5, LESS_EQUAL=6, 
		GREATER=7, GREATER_EQUAL=8, NOT_EQUAL=9, OR=10, AND=11, COMMA=12, SIGNED_NUMBER=13, 
		PLUS=14, MINUS=15, MULTIPLY=16, DIVIDE=17, MOD=18, DIV=19, MAX=20, MIN=21, 
		UPPERCASE_LETTER=22, UNSIGNED_NUMBER=23;
	public const int
		RULE_boolean_expression = 0, RULE_comparison_operator = 1, RULE_boolean_operator = 2, 
		RULE_arithmetic_expression = 3, RULE_arithmetic_operator = 4, RULE_function = 5, 
		RULE_cell_id = 6;
	public static readonly string[] ruleNames = {
		"boolean_expression", "comparison_operator", "boolean_operator", "arithmetic_expression", 
		"arithmetic_operator", "function", "cell_id"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOT", "OPENING_BRACKET", "CLOSING_BRACKET", "EQUAL", "LESS", "LESS_EQUAL", 
		"GREATER", "GREATER_EQUAL", "NOT_EQUAL", "OR", "AND", "COMMA", "SIGNED_NUMBER", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "DIV", "MAX", "MIN", "UPPERCASE_LETTER", 
		"UNSIGNED_NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext[] boolean_expression() {
			return GetRuleContexts<Boolean_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_expressionContext boolean_expression(int i) {
			return GetRuleContext<Boolean_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExpressionsParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cell_idContext cell_id() {
			return GetRuleContext<Cell_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_operatorContext boolean_operator() {
			return GetRuleContext<Boolean_operatorContext>(0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		return boolean_expression(0);
	}

	private Boolean_expressionContext boolean_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Boolean_expressionContext _localctx = new Boolean_expressionContext(Context, _parentState);
		Boolean_expressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_boolean_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 15;
					Match(NOT);
					}
				}

				State = 18;
				Match(OPENING_BRACKET);
				State = 19;
				boolean_expression(0);
				State = 20;
				Match(CLOSING_BRACKET);
				}
				break;
			case 2:
				{
				State = 22;
				arithmetic_expression(0);
				State = 23;
				comparison_operator();
				State = 24;
				arithmetic_expression(0);
				}
				break;
			case 3:
				{
				State = 26;
				cell_id();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 35;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolean_expression);
					State = 29;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 30;
					boolean_operator();
					State = 31;
					boolean_expression(4);
					}
					} 
				}
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(ExpressionsParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ExpressionsParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(ExpressionsParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ExpressionsParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(ExpressionsParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(ExpressionsParser.NOT_EQUAL, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << LESS) | (1L << LESS_EQUAL) | (1L << GREATER) | (1L << GREATER_EQUAL) | (1L << NOT_EQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ExpressionsParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ExpressionsParser.AND, 0); }
		public Boolean_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_operatorContext boolean_operator() {
		Boolean_operatorContext _localctx = new Boolean_operatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolean_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !(_la==OR || _la==AND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ExpressionsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_NUMBER() { return GetToken(ExpressionsParser.SIGNED_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_operatorContext arithmetic_operator() {
			return GetRuleContext<Arithmetic_operatorContext>(0);
		}
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENING_BRACKET:
				{
				State = 43;
				Match(OPENING_BRACKET);
				State = 44;
				arithmetic_expression(0);
				State = 45;
				Match(CLOSING_BRACKET);
				}
				break;
			case MAX:
			case MIN:
				{
				State = 47;
				function();
				State = 48;
				Match(OPENING_BRACKET);
				State = 49;
				arithmetic_expression(0);
				State = 50;
				Match(COMMA);
				State = 51;
				arithmetic_expression(0);
				State = 52;
				Match(CLOSING_BRACKET);
				}
				break;
			case SIGNED_NUMBER:
				{
				State = 54;
				Match(SIGNED_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Arithmetic_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					State = 57;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 58;
					arithmetic_operator();
					State = 59;
					arithmetic_expression(4);
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Arithmetic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ExpressionsParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionsParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(ExpressionsParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ExpressionsParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ExpressionsParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ExpressionsParser.DIV, 0); }
		public Arithmetic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_operatorContext arithmetic_operator() {
		Arithmetic_operatorContext _localctx = new Arithmetic_operatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_arithmetic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << DIVIDE) | (1L << MOD) | (1L << DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ExpressionsParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(ExpressionsParser.MIN, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = TokenStream.LA(1);
			if ( !(_la==MAX || _la==MIN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_NUMBER() { return GetToken(ExpressionsParser.UNSIGNED_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UPPERCASE_LETTER() { return GetTokens(ExpressionsParser.UPPERCASE_LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPERCASE_LETTER(int i) {
			return GetToken(ExpressionsParser.UPPERCASE_LETTER, i);
		}
		public Cell_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_idContext cell_id() {
		Cell_idContext _localctx = new Cell_idContext(Context, State);
		EnterRule(_localctx, 12, RULE_cell_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70;
				Match(UPPERCASE_LETTER);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==UPPERCASE_LETTER );
			State = 75;
			Match(UNSIGNED_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return boolean_expression_sempred((Boolean_expressionContext)_localctx, predIndex);
		case 3: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolean_expression_sempred(Boolean_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', 'P', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1E', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '$', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\'', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ':', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '@', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x43', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x6', '\b', 'J', '\n', '\b', '\r', 
		'\b', '\xE', '\b', 'K', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x2', 
		'\x4', '\x2', '\b', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x2', '\x6', '\x3', '\x2', '\x6', '\v', '\x3', '\x2', '\f', '\r', '\x3', 
		'\x2', '\x10', '\x15', '\x3', '\x2', '\x16', '\x17', '\x2', 'P', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '*', '\x3', '\x2', '\x2', '\x2', '\b', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x44', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', 
		'\b', '\x2', '\x1', '\x2', '\x11', '\x13', '\a', '\x3', '\x2', '\x2', 
		'\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\a', '\x4', '\x2', '\x2', '\x15', '\x16', '\x5', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\a', '\x5', '\x2', '\x2', '\x17', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x5', '\b', '\x5', '\x2', '\x19', '\x1A', 
		'\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\x5', '\b', '\x5', '\x2', 
		'\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\xE', 
		'\b', '\x2', '\x1D', '\x10', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '%', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\f', '\x5', '\x2', 
		'\x2', ' ', '!', '\x5', '\x6', '\x4', '\x2', '!', '\"', '\x5', '\x2', 
		'\x2', '\x6', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', 
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\t', '\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\t', '\x3', '\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\b', '\x5', '\x1', '\x2', '-', '.', '\a', '\x4', '\x2', 
		'\x2', '.', '/', '\x5', '\b', '\x5', '\x2', '/', '\x30', '\a', '\x5', 
		'\x2', '\x2', '\x30', ':', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\f', '\a', '\x2', '\x32', '\x33', '\a', '\x4', '\x2', '\x2', '\x33', 
		'\x34', '\x5', '\b', '\x5', '\x2', '\x34', '\x35', '\a', '\xE', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\b', '\x5', '\x2', '\x36', '\x37', '\a', 
		'\x5', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		':', '\a', '\xF', '\x2', '\x2', '\x39', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x31', '\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x41', '\x3', '\x2', '\x2', '\x2', ';', '<', '\f', 
		'\x5', '\x2', '\x2', '<', '=', '\x5', '\n', '\x6', '\x2', '=', '>', '\x5', 
		'\b', '\x5', '\x6', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', ';', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\t', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\t', '\x4', '\x2', '\x2', '\x45', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\t', '\x5', '\x2', '\x2', 
		'G', '\r', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', '\x18', '\x2', 
		'\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x19', '\x2', 
		'\x2', 'N', '\xF', '\x3', '\x2', '\x2', '\x2', '\b', '\x12', '\x1D', '%', 
		'\x39', '\x41', 'K',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
