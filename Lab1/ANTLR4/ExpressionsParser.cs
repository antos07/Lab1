//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\antos07\Documents\University\OOP Labs\Lab1\Lab1\ANTLR4\Expressions.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENING_BRACKET=1, CLOSING_BRACKET=2, COMMA=3, COMPARISON_OPERATOR=4, 
		NOT=5, AND=6, OR=7, PLUS=8, MINUS=9, MULTIPLY=10, DIVIDE=11, DIV=12, MOD=13, 
		FUNCTION=14, UNSIGNED_NUMBER=15, CELL_ID=16, WHITESPACE=17;
	public const int
		RULE_expressionInCell = 0, RULE_booleanExpression = 1, RULE_arithmeticExpression = 2;
	public static readonly string[] ruleNames = {
		"expressionInCell", "booleanExpression", "arithmeticExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", null, "'not'", "'and'", "'or'", "'+'", "'-'", 
		"'*'", "'/'", "'div'", "'mod'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENING_BRACKET", "CLOSING_BRACKET", "COMMA", "COMPARISON_OPERATOR", 
		"NOT", "AND", "OR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "DIV", "MOD", 
		"FUNCTION", "UNSIGNED_NUMBER", "CELL_ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionInCellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExpressionsParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ExpressionInCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInCell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInCellContext expressionInCell() {
		ExpressionInCellContext _localctx = new ExpressionInCellContext(Context, State);
		EnterRule(_localctx, 0, RULE_expressionInCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 6;
				booleanExpression(0);
				}
				break;
			case 2:
				{
				State = 7;
				arithmeticExpression(0);
				}
				break;
			}
			State = 10;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
	 
		public BooleanExpressionContext() { }
		public virtual void CopyFrom(BooleanExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CellIdBoolExpContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL_ID() { return GetToken(ExpressionsParser.CELL_ID, 0); }
		public CellIdBoolExpContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellIdBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrBoolExpContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ExpressionsParser.OR, 0); }
		public OrBoolExpContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompBoolExpContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(ExpressionsParser.COMPARISON_OPERATOR, 0); }
		public CompBoolExpContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndBoolExpContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ExpressionsParser.AND, 0); }
		public AndBoolExpContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisBoolExpContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		public ParenthesisBoolExpContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotBoolExprContext : BooleanExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExpressionsParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		public NotBoolExprContext(BooleanExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_booleanExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new NotBoolExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 13;
				Match(NOT);
				State = 14;
				Match(OPENING_BRACKET);
				State = 15;
				booleanExpression(0);
				State = 16;
				Match(CLOSING_BRACKET);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisBoolExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18;
				Match(OPENING_BRACKET);
				State = 19;
				booleanExpression(0);
				State = 20;
				Match(CLOSING_BRACKET);
				}
				break;
			case 3:
				{
				_localctx = new CompBoolExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22;
				arithmeticExpression(0);
				State = 23;
				Match(COMPARISON_OPERATOR);
				State = 24;
				arithmeticExpression(0);
				}
				break;
			case 4:
				{
				_localctx = new CellIdBoolExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				Match(CELL_ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 37;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 35;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new AndBoolExpContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 29;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 30;
						Match(AND);
						State = 31;
						booleanExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new OrBoolExpContext(new BooleanExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						State = 32;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 33;
						Match(OR);
						State = 34;
						booleanExpression(4);
						}
						break;
					}
					} 
				}
				State = 39;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
	 
		public ArithmeticExpressionContext() { }
		public virtual void CopyFrom(ArithmeticExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultDivArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(ExpressionsParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(ExpressionsParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ExpressionsParser.DIV, 0); }
		public MultDivArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusMinusArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ExpressionsParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionsParser.MINUS, 0); }
		public PlusMinusArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusMinusArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellIdArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL_ID() { return GetToken(ExpressionsParser.CELL_ID, 0); }
		public CellIdArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellIdArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(ExpressionsParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ExpressionsParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		public FunctionArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsignedNumericArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_NUMBER() { return GetToken(ExpressionsParser.UNSIGNED_NUMBER, 0); }
		public UnsignedNumericArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedNumericArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		public ParenthesisArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisArExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedNumericExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENING_BRACKET() { return GetToken(ExpressionsParser.OPENING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_NUMBER() { return GetToken(ExpressionsParser.UNSIGNED_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSING_BRACKET() { return GetToken(ExpressionsParser.CLOSING_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ExpressionsParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionsParser.MINUS, 0); }
		public SignedNumericExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedNumericExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModArExpContext : ArithmeticExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ExpressionsParser.MOD, 0); }
		public ModArExpContext(ArithmeticExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModArExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_arithmeticExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new FunctionArExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41;
				Match(FUNCTION);
				State = 42;
				Match(OPENING_BRACKET);
				State = 43;
				arithmeticExpression(0);
				State = 44;
				Match(COMMA);
				State = 45;
				arithmeticExpression(0);
				State = 46;
				Match(CLOSING_BRACKET);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisArExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48;
				Match(OPENING_BRACKET);
				State = 49;
				arithmeticExpression(0);
				State = 50;
				Match(CLOSING_BRACKET);
				}
				break;
			case 3:
				{
				_localctx = new SignedNumericExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 52;
				Match(OPENING_BRACKET);
				State = 53;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 54;
				Match(UNSIGNED_NUMBER);
				State = 55;
				Match(CLOSING_BRACKET);
				}
				break;
			case 4:
				{
				_localctx = new UnsignedNumericArExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56;
				Match(UNSIGNED_NUMBER);
				}
				break;
			case 5:
				{
				_localctx = new CellIdArExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57;
				Match(CELL_ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 71;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 69;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ModArExpContext(new ArithmeticExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 60;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 61;
						Match(MOD);
						State = 62;
						arithmeticExpression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultDivArExpContext(new ArithmeticExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 63;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 64;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << DIV))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 65;
						arithmeticExpression(6);
						}
						break;
					case 3:
						{
						_localctx = new PlusMinusArExpContext(new ArithmeticExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						State = 66;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 67;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 68;
						arithmeticExpression(5);
						}
						break;
					}
					} 
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 2: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', 'M', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\v', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '&', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', ')', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '=', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'H', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'K', 
		'\v', '\x4', '\x3', '\x4', '\x2', '\x4', '\x4', '\x6', '\x5', '\x2', '\x4', 
		'\x6', '\x2', '\x4', '\x3', '\x2', '\n', '\v', '\x3', '\x2', '\f', '\xE', 
		'\x2', 'V', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '<', '\x3', '\x2', '\x2', '\x2', '\b', '\v', 
		'\x5', '\x4', '\x3', '\x2', '\t', '\v', '\x5', '\x6', '\x4', '\x2', '\n', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\n', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\a', '\x2', '\x2', 
		'\x3', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\b', '\x3', 
		'\x1', '\x2', '\xF', '\x10', '\a', '\a', '\x2', '\x2', '\x10', '\x11', 
		'\a', '\x3', '\x2', '\x2', '\x11', '\x12', '\x5', '\x4', '\x3', '\x2', 
		'\x12', '\x13', '\a', '\x4', '\x2', '\x2', '\x13', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x15', '\a', '\x3', '\x2', '\x2', '\x15', '\x16', 
		'\x5', '\x4', '\x3', '\x2', '\x16', '\x17', '\a', '\x4', '\x2', '\x2', 
		'\x17', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', '\x6', 
		'\x4', '\x2', '\x19', '\x1A', '\a', '\x6', '\x2', '\x2', '\x1A', '\x1B', 
		'\x5', '\x6', '\x4', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1E', '\a', '\x12', '\x2', '\x2', '\x1D', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x14', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\'', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\f', '\x6', '\x2', 
		'\x2', ' ', '!', '\a', '\b', '\x2', '\x2', '!', '&', '\x5', '\x4', '\x3', 
		'\a', '\"', '#', '\f', '\x5', '\x2', '\x2', '#', '$', '\a', '\t', '\x2', 
		'\x2', '$', '&', '\x5', '\x4', '\x3', '\x6', '%', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x5', '\x3', '\x2', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', '*', '+', '\b', '\x4', '\x1', '\x2', 
		'+', ',', '\a', '\x10', '\x2', '\x2', ',', '-', '\a', '\x3', '\x2', '\x2', 
		'-', '.', '\x5', '\x6', '\x4', '\x2', '.', '/', '\a', '\x5', '\x2', '\x2', 
		'/', '\x30', '\x5', '\x6', '\x4', '\x2', '\x30', '\x31', '\a', '\x4', 
		'\x2', '\x2', '\x31', '=', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x3', '\x2', '\x2', '\x33', '\x34', '\x5', '\x6', '\x4', '\x2', 
		'\x34', '\x35', '\a', '\x4', '\x2', '\x2', '\x35', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x3', '\x2', '\x2', '\x37', '\x38', 
		'\t', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x11', '\x2', '\x2', 
		'\x39', '=', '\a', '\x4', '\x2', '\x2', ':', '=', '\a', '\x11', '\x2', 
		'\x2', ';', '=', '\a', '\x12', '\x2', '\x2', '<', '*', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x32', '\x3', '\x2', '\x2', '\x2', '<', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', 'I', '\x3', '\x2', '\x2', '\x2', '>', '?', '\f', '\b', 
		'\x2', '\x2', '?', '@', '\a', '\xF', '\x2', '\x2', '@', 'H', '\x5', '\x6', 
		'\x4', '\t', '\x41', '\x42', '\f', '\a', '\x2', '\x2', '\x42', '\x43', 
		'\t', '\x3', '\x2', '\x2', '\x43', 'H', '\x5', '\x6', '\x4', '\b', '\x44', 
		'\x45', '\f', '\x6', '\x2', '\x2', '\x45', '\x46', '\t', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\x5', '\x6', '\x4', '\a', 'G', '>', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x41', '\x3', '\x2', '\x2', '\x2', 'G', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', '\t', 
		'\n', '\x1D', '%', '\'', '<', 'G', 'I',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
