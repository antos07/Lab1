//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\antos07\Documents\University\OOP Labs\Lab1\Lab1\ANTLR4\Expressions.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPENING_BRACKET=1, CLOSING_BRACKET=2, COMMA=3, COMPARISON_OPERATOR=4, 
		NOT=5, AND=6, OR=7, PLUS=8, MINUS=9, MULTIPLY=10, DIVIDE=11, DIV=12, MOD=13, 
		FUNCTION=14, UNSIGNED_NUMBER=15, CELL_ID=16, WHITESPACE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPENING_BRACKET", "CLOSING_BRACKET", "COMMA", "EQUAL", "LESS", "LESS_EQUAL", 
		"GREATER", "GREATER_EQUAL", "NOT_EQUAL", "COMPARISON_OPERATOR", "NOT", 
		"AND", "OR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "DIV", "MOD", "FUNCTION", 
		"DIGIT", "UNSIGNED_NUMBER", "UPPERCASE_LETTER", "COLUMN_ID", "ROW_ID", 
		"CELL_ID", "WHITESPACE"
	};


	public ExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", null, "'not'", "'and'", "'or'", "'+'", "'-'", 
		"'*'", "'/'", "'div'", "'mod'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPENING_BRACKET", "CLOSING_BRACKET", "COMMA", "COMPARISON_OPERATOR", 
		"NOT", "AND", "OR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "DIV", "MOD", 
		"FUNCTION", "UNSIGNED_NUMBER", "CELL_ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x90', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'U', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 'x', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x6', '\x17', '}', 
		'\n', '\x17', '\r', '\x17', '\xE', '\x17', '~', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x6', '\x19', '\x84', '\n', '\x19', '\r', '\x19', 
		'\xE', '\x19', '\x85', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x2', '\x2', '\x1D', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x2', '\v', '\x2', '\r', '\x2', '\xF', '\x2', '\x11', '\x2', '\x13', 
		'\x2', '\x15', '\x6', '\x17', '\a', '\x19', '\b', '\x1B', '\t', '\x1D', 
		'\n', '\x1F', '\v', '!', '\f', '#', '\r', '%', '\xE', '\'', '\xF', ')', 
		'\x10', '+', '\x2', '-', '\x11', '/', '\x2', '\x31', '\x2', '\x33', '\x2', 
		'\x35', '\x12', '\x37', '\x13', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', 
		';', '\x3', '\x2', '\x43', '\\', '\x4', '\x2', '\v', '\f', '\"', '\"', 
		'\x2', '\x8D', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x5', ';', '\x3', '\x2', '\x2', '\x2', 
		'\a', '=', '\x3', '\x2', '\x2', '\x2', '\t', '?', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x41', '\x3', '\x2', '\x2', '\x2', '\r', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x46', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x13', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x15', 'T', '\x3', '\x2', '\x2', '\x2', '\x17', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x19', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1B', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x65', '\x3', '\x2', '\x2', '\x2', '#', 
		'g', '\x3', '\x2', '\x2', '\x2', '%', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\'', 'm', '\x3', '\x2', '\x2', '\x2', ')', 'w', '\x3', '\x2', '\x2', 
		'\x2', '+', 'y', '\x3', '\x2', '\x2', '\x2', '-', '|', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x80', '\x3', '\x2', '\x2', '\x2', '\x31', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x87', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x37', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '*', '\x2', '\x2', ':', '\x4', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '+', '\x2', '\x2', '<', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\a', '.', '\x2', '\x2', '>', '\b', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '?', '\x2', '\x2', '@', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\a', '>', '\x2', '\x2', '\x42', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\v', '\x6', '\x2', '\x44', 
		'\x45', '\x5', '\t', '\x5', '\x2', '\x45', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '@', '\x2', '\x2', 'G', '\x10', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x5', '\xF', '\b', '\x2', 'I', 'J', '\x5', '\t', 
		'\x5', '\x2', 'J', '\x12', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', 
		'\v', '\x6', '\x2', 'L', 'M', '\x5', '\xF', '\b', '\x2', 'M', '\x14', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'U', '\x5', '\r', '\a', '\x2', 'O', 'U', 
		'\x5', '\x11', '\t', '\x2', 'P', 'U', '\x5', '\x13', '\n', '\x2', 'Q', 
		'U', '\x5', '\t', '\x5', '\x2', 'R', 'U', '\x5', '\v', '\x6', '\x2', 'S', 
		'U', '\x5', '\xF', '\b', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 
		'T', 'O', '\x3', '\x2', '\x2', '\x2', 'T', 'P', '\x3', '\x2', '\x2', '\x2', 
		'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', 'p', '\x2', '\x2', 'W', 'X', '\a', 'q', '\x2', 
		'\x2', 'X', 'Y', '\a', 'v', '\x2', '\x2', 'Y', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\x63', '\x2', '\x2', '[', '\\', '\a', 'p', '\x2', 
		'\x2', '\\', ']', '\a', '\x66', '\x2', '\x2', ']', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', 'q', '\x2', '\x2', '_', '`', '\a', 't', 
		'\x2', '\x2', '`', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\a', '-', '\x2', '\x2', '\x62', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '/', '\x2', '\x2', '\x64', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', ',', '\x2', '\x2', '\x66', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '\x31', '\x2', '\x2', 'h', '$', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\a', '\x66', '\x2', '\x2', 'j', 'k', '\a', 'k', '\x2', 
		'\x2', 'k', 'l', '\a', 'x', '\x2', '\x2', 'l', '&', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', 'o', '\x2', '\x2', 'n', 'o', '\a', 'q', '\x2', 
		'\x2', 'o', 'p', '\a', '\x66', '\x2', '\x2', 'p', '(', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', 'o', '\x2', '\x2', 'r', 's', '\a', '\x63', '\x2', 
		'\x2', 's', 'x', '\a', 'z', '\x2', '\x2', 't', 'u', '\a', 'o', '\x2', 
		'\x2', 'u', 'v', '\a', 'k', '\x2', '\x2', 'v', 'x', '\a', 'p', '\x2', 
		'\x2', 'w', 'q', '\x3', '\x2', '\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', 
		'\x2', 'x', '*', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\t', '\x2', '\x2', 
		'\x2', 'z', ',', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x5', '+', '\x16', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '.', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\t', '\x3', '\x2', '\x2', '\x81', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x84', '\x5', '/', '\x18', '\x2', '\x83', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x32', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', '-', 
		'\x17', '\x2', '\x88', '\x34', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x5', '\x31', '\x19', '\x2', '\x8A', '\x8B', '\x5', '\x33', '\x1A', '\x2', 
		'\x8B', '\x36', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\t', '\x4', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\b', '\x1C', '\x2', '\x2', '\x8F', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x2', 'T', 'w', '~', '\x85', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
